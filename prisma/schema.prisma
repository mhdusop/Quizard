// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String        @id @default(uuid())
  name          String?
  email         String        @unique
  password      String?
  role          Role          @default(USER)
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  quizzes       Quiz[]
  attempts      QuizAttempt[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id          String        @id @default(uuid())
  title       String
  description String?
  timeLimit   Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   User          @relation(fields: [userId], references: [id])
  userId      String
  questions   Question[]
  attempts    QuizAttempt[]
}

model Question {
  id        String   @id @default(uuid())
  content   String
  type      String
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   Option[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   Answer[]
}

model Option {
  id         String   @id @default(uuid())
  content    String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model QuizAttempt {
  id        String    @id @default(uuid())
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  score     Int?
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  quizId    String
  quiz      Quiz      @relation(fields: [quizId], references: [id])
  answers   Answer[]
  completed Boolean   @default(false)
}

model Answer {
  id               String      @id @default(uuid())
  questionId       String
  question         Question    @relation(fields: [questionId], references: [id])
  selectedOptionId String?
  attemptId        String
  attempt          QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  isCorrect        Boolean?
  createdAt        DateTime    @default(now())
}
